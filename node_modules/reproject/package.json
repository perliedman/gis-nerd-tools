{
  "name": "reproject",
  "version": "0.1.1",
  "description": "Reproject GeoJSON from one projection/CRS to another",
  "repository": {
    "type": "git",
    "url": "git@github.com:perliedman/reproject.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec"
  },
  "bin": {
    "reproject": "cli.js"
  },
  "keywords": [
    "geojson",
    "projection",
    "proj4",
    "maps"
  ],
  "author": {
    "name": "Per Liedman"
  },
  "license": "MIT",
  "dependencies": {
    "minimist": "0.0.2",
    "concat-stream": "~1.0.1",
    "proj4": "~1.4.0"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.12.0"
  },
  "readme": "reproject\n=========\n\nTakes GeoJSON in one projection/CRS and transforms, or reprojects, it to another.\n\n## cli\n\ninstall:\n\n    $ npm install -g reproject\n\nuse:\n\n    $ echo '{\"type\":\"Point\",\"coordinates\":[319180, 6399862]}' | reproject --use-spatialreference --from=EPSG:3006 --to=EPSG:4326\n\nOptions:\n\n* ```--from=crs-name``` is the CRS to convert the GeoJSON from\n* ```--to=crs-name``` is the CRS to convert the GeoJSON to\n* ```--use-spatialreference``` or ```--sr``` to use [spatialreference.org](http://spatialreference.org/) to look up\n  any CRS definitions that aren't already known\n* ```--crs-defs=file``` to provide a JSON dictionary of known CRS definitions. A sample file of CRS definitions, crs-defs.json, is supplied.\n* ```--reverse``` to reverse the axis (swap x and y) before performing the reprojection\n\nreproject can be used together with for example [wellknown](https://github.com/mapbox/wellknown/) and [geojsonio-cli](https://github.com/mapbox/geojsonio-cli/):\n\n    $ echo \"POINT(319180 6399862)\" | wellknown | reproject --crs-defs=crs-defs.json --from=EPSG:3006 --to=EPSG:4326 | geojsonio\n\n## usage\n\nInstallation is easy with npm:\n\n    npm install reproject\n\nIt works well in the browser with for example [browserify](http://browserify.org/).\n\n## api\n\n### reproject(geojson, from, to, crss)\n\nReprojects the given GeoJSON from the CRS given in **from** to the CRS given in **to**.\n\nThe from and to arguments can either be a proj4 projection object, or a string containing a CRS name. In\nthe case of a CRS name, the proj4 projection instance is looked up using the **crss** argument. **crss**\nis assumed to be a dictionary of projection names to proj4 objects.\n\nIf from is left undefined or null, the CRS will be detected from the GeoJSON's crs property and looked up in the\n**crss** dictionary.\n\n### toWgs84(geojson, from, crss)\n\nShortcut equivalent to\n\n```js\nreproject(geojson, from, proj4.WGS84, crss)\n```\n\n### detectCrs(geojson, crss)\n\nDetects the CRS defined in the given GeoJSON and returns the corresponding proj4 projection instance from\ncrss. If no CRS is defined in the GeoJSON, or the defined CRS isn't present in **crss**, an error is thrown.\n\n### reverse(geojson)\n\nReverses the axis order of the coordinates in the given GeoJSON, such that x becomes y and y becomes x.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/perliedman/reproject/issues"
  },
  "_id": "reproject@0.1.1",
  "_from": "reproject@"
}
